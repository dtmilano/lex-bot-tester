import sys
import unittest

from lex_bot_tester.aws.alexa.alexaskilltest import AlexaSkillTest

verbose = True


class GeneratedTests(AlexaSkillTest):

    def test_crypto_skill_bitcoin(self):
        """
        Test generated by lex_bot_tester on 2018-02-15 18:30:33
        """
        skill_name = 'CryptoSkill'
        intent = 'GetPrice'
        conversation = [{'slot': None, 'text': 'ask Crypto what is the bitcoin price', 'prompt': None},
                        {'slot': None, 'prompt': 'Confirmation', 'text': ''}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_crypto_skill(self):
        """
        Test generated by lex_bot_tester on 2018-02-16 01:51:18
        """
        skill_name = 'CryptoSkill'
        intent = 'GetPrice'
        conversation = [{'slot': None, 'text': 'ask crypto the bitcoin price', 'prompt': None},
                        {'slot': 'Coin', 'text': '', 'prompt': None}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_crypto_skill_get_price(self):
        """
        Test generated by lex_bot_tester on 2018-02-17 00:13:13
        """
        skill_name = 'CryptoSkill'
        intent = 'GetPrice'
        conversation = [{'slot': None, 'text': 'start crypto', 'prompt': None},
                        {'slot': 'Coin', 'text': 'bitcoin', 'prompt': None}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_sample_skill_hello_world(self):
        """
        Test generated by lex_bot_tester on 2018-02-17 00:33:51
        """
        skill_name = 'SampleSkill'
        intent = 'HelloWorldIntent'
        conversation = [{'slot': None, 'text': 'say hello world hello', 'prompt': None}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_crypto_skill_amount_info(self):
        """
        Test generated by lex_bot_tester on 2018-02-17 01:05:23
        """
        skill_name = 'CryptoSkill'
        intent = 'AmountInfo'
        conversation = [{'slot': None, 'text': 'start crypto', 'prompt': None},
                        {'slot': 'Coin', 'text': 'bitcoin', 'prompt': None},
                        {'slot': 'Amount', 'text': '100', 'prompt': None}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_aristo_my_color_is_red(self):
        """
        Test generated by lex_bot_tester on 2018-02-18 18:43:45
        """
        skill_name = 'Aristo'
        intent = 'MyColorIsIntent'
        conversation = [{'slot': None, 'text': 'tell aristo my favorite color is red', 'prompt': None},
                        {'slot': 'Color', 'text': '', 'prompt': "What's your favorite color"}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)
        self.assertEqual(simulation_result.get_slot_value('Color'), 'red')

    def test_book_my_trip_book_car(self):
        """
        Test generated by urutu on 2018-02-18 21:27:25
        """
        skill_name = 'BookMyTripSkill'
        intent = 'BookCar'
        conversation = [{'slot': None, 'text': 'tell book my trip to book a car', 'prompt': None},
                        {'slot': 'CarType', 'text': 'luxury',
                         'prompt': 'What type of car would you like to rent,  Our most popular options are economy, midsize, and luxury'},
                        {'slot': 'PickUpCity', 'text': 'los angeles',
                         'prompt': 'In what city do you need to rent a car?'},
                        {'slot': 'PickUpDate', 'text': 'tomorrow',
                         'prompt': 'What day do you want to start your rental?'},
                        {'slot': 'ReturnDate', 'text': 'next week',
                         'prompt': 'What day do you want to return the car?'},
                        {'slot': 'DriverAge', 'text': '25', 'prompt': 'How old is the driver for this rental?'}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_book_my_trip_reserve_car_1(self):
        """
        Test generated by urutu on 2018-02-19 00:35:57
        """
        skill_name = 'BookMyTripSkill'
        intent = 'BookCar'
        conversation = [{'slot': None, 'text': 'ask book my trip to reserve a car', 'prompt': None},
                        {'slot': 'CarType', 'text': 'luxury',
                         'prompt': 'What type of car would you like to rent,  Our most popular options are economy, midsize, and luxury'},
                        {'slot': 'PickUpCity', 'text': 'reno', 'prompt': 'In what city do you need to rent a car?'},
                        {'slot': 'PickUpDate', 'text': 'tomorrow',
                         'prompt': 'What day do you want to start your rental?'},
                        {'slot': 'ReturnDate', 'text': 'next week',
                         'prompt': 'What day do you want to return the car?'},
                        {'slot': 'DriverAge', 'text': '25', 'prompt': 'How old is the driver for this rental?'}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_city_guide_coffee(self):
        """
        Test generated by urutu on 2018-02-19 22:34:22
        """
        skill_name = 'city-guide'
        intent = 'CoffeeIntent'
        conversation = [{'slot': None, 'text': 'ask city guide for coffee', 'prompt': None}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)

    def test_book_my_trip_reserve_car(self):
        """
        Test generated by urutu on 2018-02-21 01:24:51
        """
        skill_name = 'BookMyTripSkill'
        intent = 'BookCar'
        conversation = [{'slot': None, 'text': 'ask book my trip to reserve a car', 'prompt': None},
                        {'slot': 'CarType', 'text': 'midsize',
                         'prompt': 'What type of car would you like to rent,  Our most popular options are economy, midsize, and luxury'},
                        {'slot': 'PickUpCity', 'text': 'vancouver',
                         'prompt': 'In what city do you need to rent a car?'},
                        {'slot': 'PickUpDate', 'text': 'tomorrow',
                         'prompt': 'What day do you want to start your rental?'},
                        {'slot': 'ReturnDate', 'text': 'next week',
                         'prompt': 'What day do you want to return the car?'},
                        {'slot': 'DriverAge', 'text': '25', 'prompt': 'How old is the driver for this rental?'}]
        simulation_result = self.conversation_text(skill_name, intent, conversation, verbose=verbose)
        self.assertSimulationResultIsCorrect(simulation_result, verbose=verbose)


if __name__ == '__main__':
    verbose = '-v' in sys.argv or '--verbose' in sys.argv
    unittest.main()
